#!/usr/bin/env python3

import os
import sys
import logging
from client.cli import CLI
from client.log import Log

import argparse

parser = argparse.ArgumentParser(description='Postgres Admin')
parser.add_argument('command', help="Commands: script | grants")
parser.add_argument('--script', 
                    help='The script to run')
parser.add_argument('--user', 
                    help='The user you want to include in SQL commands')
parser.add_argument('--out', 
                    help='A file to write the output')
parser.add_argument('--params', 
                    help='Space delimited string of name1=value1 pairs')
# parser.add_argument('--project', 
#                     help='research project')
# parser.add_argument('--token',
#                     help='token')
# parser.add_argument('--private',  default=False, action='store_true',
#                     help='make the repository private so Issues are enabled')
# parser.add_argument('--repo',
#                     help='repository')
# parser.add_argument('--external_url',
#                     help='external_url')
# parser.add_argument('--branch',
#                     help='branch')
# parser.add_argument('--team', 
#                     help='share team project')
# parser.add_argument('--destroy',  default=False, type=bool,
#                     help='destroy objects')

args = parser.parse_args()

print(args.command)

log = Log(os.environ['LOG_LEVEL'], args.out)

creds = {
    "PGDATABASE": os.environ['PGDATABASE']
}


if args.command == "script":
    script = args.script

    params = {} 

    if args.params is not None:
        for arg in args.params.split(' '):
            print(arg)
            parts = arg.split('=')
            params[parts[0]] = parts[1]

    admin = CLI(creds, False)

    try:
        admin.execute_template("sql/%s.sql.tpl" % script, **params)
    finally:
        admin.close()

if args.command == "grants":
    admin = CLI(creds, False)

    script = "list_all_grants"

    user = args.user
    print(user)

    try:
        users =admin.get_users()
        if user not in users:
            raise Exception("User not found %s" % user)

        dbs = admin.get_databases()
        print("DATABASES : %s" % dbs)
        for db in dbs:
            print("--- DATABASE %s" % db)
            specificdb = CLI({"PGDATABASE":db}, False)
            try:
                specificdb.execute_template("sql/%s.sql.tpl" % script, DATABASE=db, USER=user)
            finally:
                specificdb.close()
    finally:
        admin.close()
